apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx' //使用 AspectJX 插件
apply from: "../buildPackage/pack-release.gradle"

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.yway.scomponent.yyzy"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        /**添加多 dex分包支持*/
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        ndk {
            // armeabi：已经淘汰（0%）'armeabi','x86','x86_64',
            // armeabi-v7a：曾经主流的架构平台（20%）
            // arm64-v8a：目前主流架构平台（80%）
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        renderscriptTargetApi rootProject.ext.android["targetSdkVersion"]
        renderscriptSupportModeEnabled true
        packagingOptions {
            doNotStrip '*/mips/*.so'
            doNotStrip '*/mips64/*.so'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    // APK 签名的那些事：https://www.jianshu.com/p/a1f8e5896aa2
    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            keyAlias rootProject.ext.keystore["keyAlias"]
            keyPassword rootProject.ext.keystore["keyPassword"]
            storeFile file(rootProject.ext.keystore["storeFile"])
            storePassword rootProject.ext.keystore["storePassword"]
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    //自定义输出包名的设置
    applicationVariants.all { variant ->
        // Apk 输出配置
        variant.outputs.all { output ->
            def appName = "YYZY"
            outputFileName = appName + '_V' + versionName + '_' + new Date().format("MMdd") + '_' + variant.buildType.name +'.apk'
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


}

aspectjx {
    //排除所有package路径中包含`leakcanary.internal`的class文件及库（jar文件）
    exclude 'leakcanary.internal'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(":module_organ")
        runtimeOnly project(":module_user")
        runtimeOnly project(":module_login")
    }
    implementation project(":CommonRes")//因为 CommonRes 依赖了 CommonSDK, 所以如果业务模块需要公共 UI 组件就依赖 CommonRes, 如果不需要就只依赖 CommonSDK
    implementation project(":CommonService")

    //tools
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
//    releaseImplementation rootProject.ext.dependencies["canary-release"]
//    testImplementation rootProject.ext.dependencies["canary-release"]
}
